plugins {
  id 'io.spring.dependency-management' version '1.0.1.RELEASE'
  // this spotbugs plugin would be great if it didn't fail the build over system.exit
  //  id "com.github.spotbugs" version "1.6.0"
}

apply plugin: 'java'
apply plugin: 'idea'
//apply plugin: 'checkstyle'
//apply plugin: 'pmd'
apply plugin: 'jacoco'

dependencyManagement {
  imports {
    mavenBom 'org.apache.logging.log4j:log4j-bom:2.10.0' // keeps log4j versions in sync
  }
}

repositories {
    mavenCentral()
}

configurations {
    provided
    compile.extendsFrom provided
}

dependencies {
    testImplementation 'junit:junit:4.12' // for junit tests
//    testCompile 'org.junit:junit-gradle:5.0.0-ALPHA' // how do we transition to this?
    testImplementation "org.mockito:mockito-core:+" // for mocking objects when testing
    //yes, we need 3 jars for logging.  don't ask me about it.  I don't want to talk about it.
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.10.0'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.10.0'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.10.0'
    implementation 'org.reflections:reflections:0.9.11' // reflections API for interfaces
    implementation 'org.pircbotx:pircbotx:2.1' // the irc bot API
    implementation 'org.yaml:snakeyaml:1.14' // for the yaml config file
    implementation 'mysql:mysql-connector-java:5.1.45' // for mysql connection
    implementation 'org.jsoup:jsoup:1.11.2' // for web scraping
    implementation 'net.sourceforge.jeval:jeval:0.9.4' // for math operations
    implementation 'com.google.code.gson:gson:2.8.2' // for cryptocurrency package
    implementation 'org.apache.commons:commons-lang3:3.7' // for padding strings
}

sourceCompatibility = 1.17
version = '0.8-indev'

jar {
    dependsOn configurations.runtimeClasspath
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        (configurations.runtimeClasspath - configurations.provided).collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    manifest {
        attributes 'Implementation-Title': 'IRCbutt',
                'Implementation-Version': version,
                'Implementation-Vendor': 'http://github.com/proxa/IRCbutt',
                'Multi-Release': true,
                'Main-Class': 'net.alureon.ircbutt.Main',
                'Built-By': System.properties['user.name']
    }
}
// This bug tracks the warning "warning: No processor claimed any of these annotations: org.junit.Test"
//   which is caused by log4j2
// https://issues.apache.org/jira/browse/LOG4J2-1937
tasks.withType(JavaCompile) {
    options.compilerArgs += ['-Xlint:all']
    options.deprecation = true
    options.encoding = 'utf8'
}

tasks.withType(Checkstyle) {
    //configFile = new File('config/checkstyle/sane_checks.xml')
    configFile = new File('https://raw.githubusercontent.com/bartenbach/Sane-Java-Coding-Convention-Checkstyle-Config/master/sane_checks.xml')
}

// more informative tests
test {
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}
